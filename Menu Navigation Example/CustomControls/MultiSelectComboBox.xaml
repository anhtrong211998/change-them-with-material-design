<UserControl x:Class="Menu_Navigation_Example.CustomControls.MultiSelectComboBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Menu_Navigation_Example.CustomControls"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" 
             mc:Ignorable="d">
    <ComboBox
        x:Name="MultiSelectCombo"  
        SnapsToDevicePixels="True"
        OverridesDefaultStyle="True"                
        ScrollViewer.HorizontalScrollBarVisibility="Auto"
        materialDesign:HintAssist.IsFloating="True"
        ScrollViewer.VerticalScrollBarVisibility="Auto"
        Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}"
        ScrollViewer.CanContentScroll="True">
        <ComboBox.ItemContainerStyle>
            <Style  TargetType="{x:Type ComboBoxItem}">
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                <Setter Property="Template" Value="{StaticResource MaterialDesignComboBoxItemTemplate}" />
            </Style>
        </ComboBox.ItemContainerStyle>
        <ComboBox.ItemTemplate>
            <DataTemplate>
                <CheckBox Content="{Binding Title}"
                          IsChecked="{Binding Path=IsSelected, Mode=TwoWay}"
                          Click="CheckBox_Click" />
            </DataTemplate>
        </ComboBox.ItemTemplate>
        <ComboBox.Template>
            <ControlTemplate TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot"
                      Background="{TemplateBinding Background}"
                      SnapsToDevicePixels="True">
                    <Grid x:Name="InnerRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="0" 
                                              MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>
                        <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}" />

                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                            <Grid x:Name="InputRoot"
                                  HorizontalAlignment="Left">
                                <ContentPresenter x:Name="contentPresenter"
                                                  Content="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  IsHitTestVisible="False" />
                                <TextBox x:Name="PART_EditableTextBox"
                                             IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                             HorizontalAlignment="Left"
                                             HorizontalContentAlignment="Stretch"
                                             Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                             CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"                                 
                                             Visibility="Collapsed" />

                                <materialDesign:SmartHint 
                                    x:Name="Hint"                                             
                                    HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"                                       
                                    FontSize="{TemplateBinding FontSize}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                    UseFloating="{Binding Path=(materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                    HintOpacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"                                                          
                                    Hint="{TemplateBinding materialDesign:HintAssist.Hint}" />
                            </Grid>
                        </Grid>

                        <Line x:Name="DashedLine" 
                              Grid.ColumnSpan="2" 
                              VerticalAlignment="Bottom"
                              Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource InverseBoolToVisConverter}}"
                              StrokeThickness="1.25" StrokeDashArray="1,2.5" StrokeDashCap="Round"
                              X1="0" X2="{Binding ActualWidth, ElementName=toggleButton}" Y1="0" Y2="0" 
                              Stroke="{TemplateBinding BorderBrush}" Opacity="0.56" />
                        <materialDesign:Underline x:Name="Underline"
                               Grid.ColumnSpan="2"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>
                        <materialDesign:ComboBoxPopup x:Name="PART_Popup"
                                   AllowsTransparency="true"
                                   Focusable="False"
                                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PopupAnimation="Slide">
                            <materialDesign:ColorZone>
                                <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder"
                                        BorderThickness="1"
                                        BorderBrush="Black"/>

                                    <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                              Background="{Binding Background, ElementName=PART_Popup}">
                                        <ItemsPresenter x:Name="ItemsPresenter" 
                                                    KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </materialDesign:ColorZone>

                        </materialDesign:ComboBoxPopup>
                    </Grid>
                </Grid>

                <ControlTemplate.Triggers>
                    <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="{x:Static materialDesign:ComboBoxPopupPlacement.Classic}">
                        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                        <Setter Property="Background" 
                                TargetName="templateRoot" 
                                Value="{Binding Background, ElementName=PART_Popup}" />
                    </Trigger>

                    <Trigger Property="HasItems" Value="false">
                        <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
                        <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsEditable" Value="True">
                        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="materialDesign:HintAssist.IsFloating" Value="True">
                        <Setter TargetName="InnerRoot" Property="Margin" Value="0 11.5 0 0" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEditable" Value="False"/>
                            <Condition Property="IsDropDownOpen" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                        <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                            <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                            <Condition Property="IsKeyboardFocusWithin" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" 
                                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                            <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                            <Condition Property="IsKeyboardFocusWithin" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" 
                                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                            <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" 
                                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                            <Condition Property="IsDropDownOpen" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Hint" Property="Foreground" 
                                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
                        <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true" />
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                    </MultiTrigger>
                    <Trigger Property="IsKeyboardFocused" Value="true">
                        <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                    </Trigger>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="true" />
                            <Condition Property="Validation.HasError" Value="true" />
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                        <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="true" />
                            <Condition Property="Validation.HasError" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" 
                                Value="{DynamicResource PrimaryHueMidBrush}"/>
                        <Setter TargetName="Underline" 
                                Property="Background" 
                                Value="{DynamicResource PrimaryHueMidBrush}"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ComboBox.Template>
    </ComboBox>
</UserControl>
